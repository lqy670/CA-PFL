import numpy as np
import networkx as nx

from flt.graph_cluster.community_louvain import best_partition, modularity


def get_weighted_edges(similarities, idc):
    weighted_edges = []
    for i, node_id1 in zip(range(similarities.shape[0]), idc):
        for j, node_id2 in zip(range(similarities.shape[1]), idc):
            # 不包括自环和负权
            if i != j:
                weighted_edges.append((node_id1, node_id2, max(1e-12, similarities[i][j])))
    return weighted_edges


def community_detection_method(graph):
    par_dict = best_partition(graph, resolution=graph.number_of_nodes())
    # 反转kv
    cluster_to_clients = {}
    for client_id, cluster_id in par_dict.items():
        if cluster_id not in cluster_to_clients.keys():
            cluster_to_clients[cluster_id] = [client_id]
        else:
            cluster_to_clients[cluster_id].append(client_id)
    cluster_indices_new = []
    for c_clitnts in cluster_to_clients.values():
        cluster_indices_new.append(c_clitnts)
    return cluster_indices_new, par_dict


if __name__ == '__main__':
    x = np.array(
        [[1.0000314e+00, 7.6579019e-02, 5.2547198e-02, 2.6244421e-02, 5.6922082e-03, 4.5606117e-03, -4.3736650e-03,
          -6.0553811e-03, -5.6428704e-03, -5.2639544e-03],
         [
             7.6579019e-02, 1.0000265e+00, 4.8229348e-02, 7.0595719e-02, 6.0078623e-03, 7.3845885e-03, -5.2962196e-03,
             -2.3390823e-03, -8.1057928e-04, -4.3966682e-03],
         [
             5.2547198e-02, 4.8229348e-02, 1.0000347e+00, 5.2510738e-02, 5.7553439e-03, 7.0456578e-03, -8.7068528e-03,
             7.3862780e-04, -3.5165309e-03, -1.0577322e-02],
         [
             2.6244421e-02, 7.0595719e-02, 5.2510738e-02, 1.0000300e+00, 4.7215410e-03, 1.0134846e-03, -6.6652916e-05,
             3.7983831e-04, -4.4314950e-03, -8.7124417e-03],
         [
             5.6922082e-03, 6.0078623e-03, 5.7553439e-03, 4.7215410e-03, 1.0000286e+00, 5.6645989e-02, 5.2599660e-03,
             1.4715539e-02, 1.4542947e-02, 1.3299743e-03],
         [
             4.5606117e-03, 7.3845885e-03, 7.0456578e-03, 1.0134846e-03, 5.6645989e-02, 1.0000297e+00, 1.3217611e-02,
             9.5355902e-03, 1.6742196e-02, 1.1948281e-02],
         [
             -4.3736650e-03, -5.2962196e-03, -8.7068528e-03, -6.6652916e-05, 5.2599660e-03, 1.3217611e-02,
             1.0000281e+00, 9.3862884e-02, 8.8610254e-02, 6.8899885e-02],
         [
             -6.0553811e-03, -2.3390823e-03, 7.3862780e-04, 3.7983831e-04, 1.4715539e-02, 9.5355902e-03, 9.3862884e-02,
             1.0000266e+00, 8.4508501e-02, 6.1577406e-02],
         [
             -5.6428704e-03, -8.1057928e-04, -3.5165309e-03, -4.4314950e-03, 1.4542947e-02, 1.6742196e-02,
             8.8610254e-02, 8.4508501e-02, 1.0000272e+00, 5.8919095e-02],
         [
             -5.2639544e-03, -4.3966682e-03, -1.0577322e-02, -8.7124417e-03, 1.3299743e-03, 1.1948281e-02,
             6.8899885e-02, 6.1577406e-02, 5.8919095e-02, 1.0000280e+00]])

    y = np.array(
        [[0.9999999, 0.7994289, 0.75501114, 0.79435086, 0.69095856, 0.7176829, 0.7147962, 0.7613221, 0.7058306,
          0.7552564],
         [0.7994289, 1., 0.7240479, 0.7846088, 0.6529836, 0.6534167, 0.6658915, 0.69219124, 0.6371668, 0.69759136],
         [0.75501114, 0.7240479, 1., 0.7410371, 0.5933513, 0.6417223, 0.60884815, 0.6629653, 0.5867428, 0.6771453],
         [0.79435086, 0.7846088, 0.7410371, 1., 0.6818572, 0.72436523, 0.7089678, 0.75738186, 0.70308703, 0.7487588],
         [0.69095856, 0.6529836, 0.5933513, 0.6818572, 1.0000001, 0.71507096, 0.75823665, 0.70041245, 0.69198996,
          0.6756738],
         [0.7176829, 0.6534167, 0.6417223, 0.72436523, 0.71507096, 0.99999994, 0.7766624, 0.761149, 0.7615313,
          0.7561298],
         [0.7147962, 0.6658915, 0.60884815, 0.7089678, 0.75823665, 0.7766624, 1., 0.73905385, 0.760701, 0.7205706],
         [0.7613221, 0.69219124, 0.6629653, 0.75738186, 0.70041245, 0.761149, 0.73905385, 1.0000001, 0.7890252,
          0.7771415],
         [0.7058306, 0.6371668, 0.5867428, 0.70308703, 0.69198996, 0.7615313, 0.760701, 0.7890252, 1.0000001,
          0.7677203],
         [0.7552564, 0.69759136, 0.6771453, 0.7487588, 0.6756738, 0.7561298, 0.7205706, 0.7771415, 0.7677203, 1.]])

    graph = nx.Graph()  # 使用network初始化图
    graph.add_weighted_edges_from(get_weighted_edges(y, range(10)))
    ar_idcs, par_dict = community_detection_method(graph)
    cur_mod = modularity(par_dict, graph)
    print(f"the community modularity is {cur_mod}")
